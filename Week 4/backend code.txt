


package com.example.spllabportal;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import com.google.android.gms.auth.api.signin.GoogleSignIn;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInClient;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.common.api.ApiException;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthCredential;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.auth.GoogleAuthProvider;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

import java.util.HashMap;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "GoogleSignIn";
    private static final int RC_SIGN_IN = 9001;
    private GoogleSignInClient mGoogleSignInClient;
    private FirebaseAuth mAuth;
    private Button signInButton;
    private TextView welcomeTextView;
    private TextView nameTextView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        signInButton = findViewById(R.id.signinbutton);
        welcomeTextView = findViewById(R.id.welcome);
        nameTextView = findViewById(R.id.name);
        mAuth = FirebaseAuth.getInstance();
        // Configure Google Sign-In
        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestIdToken("1006634308462-ecn0hegen139lpm0vfdlmhett0cced0m.apps.googleusercontent.com")
                .requestEmail()
                .build();

        mGoogleSignInClient = GoogleSignIn.getClient(this, gso);

        signInButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                signOutAndSignIn(); // Sign out and then sign in again to show account chooser
            }
        });
    }

    private void signOutAndSignIn() {
        // Sign out before showing the account chooser
        mGoogleSignInClient.signOut()
                .addOnCompleteListener(this, task -> {
                    // After signing out, trigger the sign-in flow again
                    signIn();
                });
    }

    private void signIn() {
        Intent signInIntent = mGoogleSignInClient.getSignInIntent();
        startActivityForResult(signInIntent, RC_SIGN_IN);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == RC_SIGN_IN) {
            Task<GoogleSignInAccount> task = GoogleSignIn.getSignedInAccountFromIntent(data);
            handleSignInResult(task);
        }
    }

    private void handleSignInResult(Task<GoogleSignInAccount> completedTask) {
        try {
            GoogleSignInAccount account = completedTask.getResult(ApiException.class);
            if (account != null) {
                String email = account.getEmail();
                if (email != null && email.endsWith("@bitsathy.ac.in")) {
                    FirebaseAuth mAuth = FirebaseAuth.getInstance();
                    AuthCredential credential = GoogleAuthProvider.getCredential(account.getIdToken(), null);

                    mAuth.signInWithCredential(credential)
                            .addOnCompleteListener(this, task -> {
                                if (task.isSuccessful()) {
                                    FirebaseUser user = mAuth.getCurrentUser();
                                    if (user != null) {
                                        // Save user info to Firebase Authentication
                                        saveUserToFirebase(user);

                                        // Navigate based on email type
                                        if (isStudentEmail(email)) {
                                            startActivity(new Intent(MainActivity.this, UserModeActivity.class));
                                        } else if (isFacultyEmail(email)) {
                                            startActivity(new Intent(MainActivity.this, AdminModeActivity.class));
                                        } else {
                                            Toast.makeText(this, "Invalid email pattern for faculty or student.", Toast.LENGTH_SHORT).show();
                                        }
                                    }
                                } else {
                                    Toast.makeText(this, "Firebase Authentication failed.", Toast.LENGTH_SHORT).show();
                                }
                            });
                } else {
                    Toast.makeText(this, "Invalid email domain.", Toast.LENGTH_SHORT).show();
                }
            }
        } catch (ApiException e) {
            Log.w(TAG, "signInResult:failed code=" + e.getStatusCode());
            Toast.makeText(this, "Sign-in failed. Please try again.", Toast.LENGTH_SHORT).show();
        }
    }

    private void saveUserToFirebase(FirebaseUser user) {
        DatabaseReference databaseReference = FirebaseDatabase.getInstance().getReference("Users");
        String userId = user.getUid();

        HashMap<String, Object> userData = new HashMap<>();
        userData.put("uid", userId);
        userData.put("name", user.getDisplayName());
        userData.put("email", user.getEmail());
        userData.put("profilePic", user.getPhotoUrl() != null ? user.getPhotoUrl().toString() : "");

        databaseReference.child(userId).setValue(userData)
                .addOnSuccessListener(aVoid -> Log.d(TAG, "User added to Firebase Database"))
                .addOnFailureListener(e -> Log.e(TAG, "Failed to add user", e));
    }


    private boolean isStudentEmail(String email) {
        // Check if the email matches the student pattern
        return email.matches("^[a-zA-Z]+\\.[a-zA-Z]{2}\\d{2}@bitsathy\\.ac\\.in$");
    }

    private boolean isFacultyEmail(String email) {
        // Check if the email matches the faculty pattern
        return email.matches("^[a-zA-Z]+@bitsathy\\.ac\\.in$");
    }

}
